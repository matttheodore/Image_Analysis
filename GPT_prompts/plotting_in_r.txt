# Plotting Script in R


I am wanting some help thinkign through the workflow of preparing my figures for a scientific manuscript. 

i am preparing my scientific manuscript figures using a combination of adobe illustrator and R/ggplot2. 

In ggplot2 i believe I believe I can specify the font sizes/linewidths etc using themes or custom notations in ggplot which are measured in 'pt'   and I can change the overall sizes of my figures using ggsave which i believe will not effect my specified 'pt' sizes, but what sizes will change based on changing the overall dimension of my figure ?

Here is an example from one of my plots. I plotted using ggplot like this

# Convert 'cond' into a factor with levels in the desired order
my_dynpilipercell_data$cond <- factor(my_dynpilipercell_data$cond, levels = c("uninfected", "infected", "peg", "strept"))

# Creating the barplot for 'dynpilipercell'
dynpilipercell_barplot <- ggplot(my_dynpilipercell_data, aes(x = cond, y = dynpilipercell_mean, fill = cond, group = cond)) +
  geom_bar(stat = "identity") +
  geom_errorbar(aes(ymin = dynpilipercell_mean - dynpilipercell_sem, ymax = dynpilipercell_mean + dynpilipercell_sem), width = 0.1, color = "black", alpha = 0.9, size = 1.5) +
  # Add custom significance annotations with manual positions
  geom_signif(annotation = "****", y_position = 2, xmin = 1, xmax = 2, tip_length = 0.05) +
  geom_signif(annotation = "****", y_position = 2, xmin = 1, xmax = 3, tip_length = 0.05) +
  geom_signif(annotation = "****", y_position = 2, xmin = 1, xmax = 4, tip_length = 0.05) +
  ggtitle("Dynamic Pili Per Cell by Condition") +
  xlab("Condition") +
  ylab("Dynamic Pili Per Cell") +
  theme_pubr_MT() + 
  scale_color_npg() +
  theme(plot.margin = unit(c(1,1,1,1), "mm")) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Displaying the barplot
dynpilipercell_barplot

and here is my custom theme that I used which is based on theme_pubr from ggthemes. 

so here is my custom function 


function(){
  font <- "Arial" # assign font family upfront
  
  # Load theme_pubr and replace its elements
  theme_pubr() %+replace%
    
    # Set the background color and size of the plot area
    theme(
      # Set the font size and style of the plot title
      plot.title = element_text(size = 7, face = "bold"),
      # Set the font size of the axis titles
      axis.title = element_text(size = 6),
      # Set the font size of the axis labels
      axis.text = element_text(size = 5),
      # Set the font size of the legend title and text
      legend.title = element_text(size = 6),
      legend.text = element_text(size = 5), 
      
    )
}
and here is the theme_pubr code 

#' @include utilities.R
#' @import ggplot2
NULL
#'Publication ready theme
#'
#'@description \itemize{ \item \strong{theme_pubr()}: Create a publication ready
#'  theme \item \strong{theme_pubclean()}: a clean theme without axis lines, to
#'  direct more attention to the data.  \item \strong{labs_pubr()}: Format only
#'  plot labels to a publication ready style \item \strong{theme_classic2()}:
#'  Create a classic theme with axis lines. \item \strong{clean_theme()}: Remove
#'  axis lines, ticks, texts and titles. \item \strong{clean_table_theme()}:
#'  Clean the the theme of a table, such as those created by
#'  \code{\link{ggsummarytable}()}}.
#'@param base_size base font size
#'@param base_family base font family
#'@param border logical value. Default is FALSE. If TRUE, add panel border.
#'@param margin logical value. Default is TRUE. If FALSE, reduce plot margin.
#'@param legend character specifying legend position. Allowed values are one of
#'  c("top", "bottom", "left", "right", "none"). Default is "top" side position.
#'  to remove the legend use legend = "none". Legend position can be also
#'  specified using a numeric vector c(x, y).  In this case it is possible to
#'  position the legend inside the plotting area. x and y are the coordinates of
#'  the legend box. Their values should be between 0 and 1. c(0,0) corresponds
#'  to the "bottom left" and c(1,1) corresponds to the "top right" position. For
#'  instance use legend = c(0.8, 0.2).
#'@param x.text.angle Rotation angle of x axis tick labels. Default value is 0.
#'  Use 90 for vertical text.
#'@param flip logical. If TRUE, grid lines are added to y axis instead of x
#'  axis.
#' @examples
#' p <- ggplot(mtcars, aes(x = wt, y = mpg)) +
#'    geom_point(aes(color = gear))
#'
#' # Default plot
#' p
#'
#' # Use theme_pubr()
#' p + theme_pubr()
#'
#' # Format labels
#' p + labs_pubr()
#'
#'@name theme_pubr
#'@rdname theme_pubr
#'@export
theme_pubr <- function (base_size = 12, base_family = "",
                        border = FALSE, margin = TRUE,
                        legend = c("top", "bottom", "left", "right", "none"),
                        x.text.angle = 0)
{
  half_line <- base_size/2
  if(!is.numeric(legend)) legend <- match.arg(legend)
  if(x.text.angle > 5) xhjust <- 1 else xhjust <- NULL

  if(border){
    panel.border <- element_rect(fill = NA, colour = "black", size = 0.7)
    axis.line <- element_blank()
  }
  else{
    panel.border <- element_blank()
    axis.line = element_line(colour = "black", size = 0.5)
  }


  if(margin)
    plot.margin <- margin(half_line, half_line, half_line,
                          half_line)
  else plot.margin <- unit(c(0.5,0.3,0.3,0.3),"mm")

  .theme <- theme_bw(base_size = base_size, base_family = base_family) %+replace%
    theme(panel.border = panel.border,
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          axis.line = axis.line, axis.text = element_text(color = "black"),
          legend.key = element_blank(),
          strip.background = element_rect(fill = "#F2F2F2", colour = "black", size = 0.7),
          plot.margin = plot.margin,
          legend.position = legend,
          complete = TRUE)

  if(x.text.angle!=0)
    .theme <- .theme + theme(axis.text.x = element_text(angle = x.text.angle, hjust = xhjust))

  .theme
}

#' @rdname theme_pubr
#' @export
theme_pubclean <- function (base_size = 12, base_family = "", flip = FALSE)
{
  res <- theme_grey(base_size = base_size, base_family = base_family) +
    theme(
      panel.background = element_rect(fill = "white"),
      legend.background = element_rect(fill = "white"),
      legend.position = "top"

    )
  if(flip){
    res <- res + theme(
      panel.grid.major.x = element_line(linetype = "dotted", color = "grey"),
      axis.line.y = element_line(color = "black")
    )
  }
  else{
    res <- res + theme(
      panel.grid.major.y = element_line(linetype = "dotted", color = "grey")
    )
  }
  res
}


#' @rdname theme_pubr
#' @export
labs_pubr <- function(base_size = 14, base_family = ""){
  theme(
    text = element_text(family = base_family,
                        face = "plain", colour = "black", size = base_size, lineheight = 0.9,
                        hjust = 0.5, vjust = 0.5, angle = 0, margin = margin(),
                        debug = FALSE),
    # Tick labels
    axis.text.x = element_text(size = rel(0.86), colour = "black", face = "bold"),
    axis.text.y = element_text(size = rel(0.86), colour = "black", face = "bold"),

    # Axis labels
    axis.title = element_text(size = rel(1), colour = "black", face = "bold"),

    # Main title
    plot.title = element_text(size = rel(1), colour = "black" ,
                              lineheight=1.0, face = "bold"),
    legend.title = element_text(size = rel(0.7), face = "bold", colour = "black"),
    legend.text = element_text(size = rel(0.7), face = "plain", colour = "black")
  )
}

#' @rdname theme_pubr
#' @export
theme_classic2 <-
  function (base_size = 12, base_family = "")
  {
    theme_classic(base_size = base_size, base_family = base_family) %+replace%
      theme(
        axis.line.x = element_line(),
        axis.line.y = element_line()
      )
  }


#' @export
#' @rdname theme_pubr
clean_theme <- function()
{
  theme(
    axis.line.x = element_blank(),
    axis.line.y = element_blank(),
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.x = element_blank(),
    axis.ticks.y = element_blank(),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  )
}

#' @export
#' @rdname theme_pubr
clean_table_theme <- function ()
{
  theme(axis.line.x = element_blank(), axis.line.y = element_blank(),
        axis.text.x = element_blank(), axis.ticks.x = element_blank(),
        axis.ticks.y = element_blank(), axis.title.x = element_blank(),
        axis.title.y = element_blank())
}

 based on this knowledge I have a few questions. When I save my using ggsave like this 

# Saving the barplot
ggsave("dynamicpili_percell.pdf", path = "C:/Users/mattt/Documents/R_projects/Pilus Obstruction/Output/Plots", device = "pdf", plot = dynpilipercell_barplot, width = 70, height = 80, units = "mm")

if I change the dimensions to width = 140 height = 160 would I double the size of my font and my linewidths when I save as a pdf and then import into adobe illustrator? or is it simply changing my plot graphic areas, or what would be changed when I change the size using ggsave ?